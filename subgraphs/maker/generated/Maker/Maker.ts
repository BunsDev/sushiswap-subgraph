// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class LogBridgeSet extends ethereum.Event {
  get params(): LogBridgeSet__Params {
    return new LogBridgeSet__Params(this);
  }
}

export class LogBridgeSet__Params {
  _event: LogBridgeSet;

  constructor(event: LogBridgeSet) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get bridge(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class LogConvert extends ethereum.Event {
  get params(): LogConvert__Params {
    return new LogConvert__Params(this);
  }
}

export class LogConvert__Params {
  _event: LogConvert;

  constructor(event: LogConvert) {
    this._event = event;
  }

  get server(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token0(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get token1(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amount0(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get amount1(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get amountSUSHI(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Maker extends ethereum.SmartContract {
  static bind(address: Address): Maker {
    return new Maker("Maker", address);
  }

  bar(): Address {
    let result = super.call("bar", "bar():(address)", []);

    return result[0].toAddress();
  }

  try_bar(): ethereum.CallResult<Address> {
    let result = super.tryCall("bar", "bar():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  bridgeFor(token: Address): Address {
    let result = super.call("bridgeFor", "bridgeFor(address):(address)", [
      ethereum.Value.fromAddress(token)
    ]);

    return result[0].toAddress();
  }

  try_bridgeFor(token: Address): ethereum.CallResult<Address> {
    let result = super.tryCall("bridgeFor", "bridgeFor(address):(address)", [
      ethereum.Value.fromAddress(token)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  factory(): Address {
    let result = super.call("factory", "factory():(address)", []);

    return result[0].toAddress();
  }

  try_factory(): ethereum.CallResult<Address> {
    let result = super.tryCall("factory", "factory():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pendingOwner(): Address {
    let result = super.call("pendingOwner", "pendingOwner():(address)", []);

    return result[0].toAddress();
  }

  try_pendingOwner(): ethereum.CallResult<Address> {
    let result = super.tryCall("pendingOwner", "pendingOwner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _factory(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _bar(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _sushi(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _weth(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ClaimOwnershipCall extends ethereum.Call {
  get inputs(): ClaimOwnershipCall__Inputs {
    return new ClaimOwnershipCall__Inputs(this);
  }

  get outputs(): ClaimOwnershipCall__Outputs {
    return new ClaimOwnershipCall__Outputs(this);
  }
}

export class ClaimOwnershipCall__Inputs {
  _call: ClaimOwnershipCall;

  constructor(call: ClaimOwnershipCall) {
    this._call = call;
  }
}

export class ClaimOwnershipCall__Outputs {
  _call: ClaimOwnershipCall;

  constructor(call: ClaimOwnershipCall) {
    this._call = call;
  }
}

export class ConvertCall extends ethereum.Call {
  get inputs(): ConvertCall__Inputs {
    return new ConvertCall__Inputs(this);
  }

  get outputs(): ConvertCall__Outputs {
    return new ConvertCall__Outputs(this);
  }
}

export class ConvertCall__Inputs {
  _call: ConvertCall;

  constructor(call: ConvertCall) {
    this._call = call;
  }

  get token0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get token1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConvertCall__Outputs {
  _call: ConvertCall;

  constructor(call: ConvertCall) {
    this._call = call;
  }
}

export class ConvertMultipleCall extends ethereum.Call {
  get inputs(): ConvertMultipleCall__Inputs {
    return new ConvertMultipleCall__Inputs(this);
  }

  get outputs(): ConvertMultipleCall__Outputs {
    return new ConvertMultipleCall__Outputs(this);
  }
}

export class ConvertMultipleCall__Inputs {
  _call: ConvertMultipleCall;

  constructor(call: ConvertMultipleCall) {
    this._call = call;
  }

  get token0(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get token1(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }
}

export class ConvertMultipleCall__Outputs {
  _call: ConvertMultipleCall;

  constructor(call: ConvertMultipleCall) {
    this._call = call;
  }
}

export class SetBridgeCall extends ethereum.Call {
  get inputs(): SetBridgeCall__Inputs {
    return new SetBridgeCall__Inputs(this);
  }

  get outputs(): SetBridgeCall__Outputs {
    return new SetBridgeCall__Outputs(this);
  }
}

export class SetBridgeCall__Inputs {
  _call: SetBridgeCall;

  constructor(call: SetBridgeCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get bridge(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetBridgeCall__Outputs {
  _call: SetBridgeCall;

  constructor(call: SetBridgeCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get direct(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }

  get renounce(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
